#+TITLE: Archivo de Configuración de sistema LCARS
#+AUTHOR: Vicente Trincado
#+EMAIL: vtrincado.h@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle yes :results silent :exports code

:PROPERTIES:
:CUSTOM_ID: babel-init
:END:
<<babel-init>>

Robado de varias partes. Probablemente tenga spanglish metido en todas partes, pero es porque pienso así nomás.

Este es mi =init.el=:
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el" :eval no 
  (load-file "~/.emacs.d/LCARS.el")

  (put 'narrow-to-region 'disabled nil)
  (put 'list-timers 'disabled nil)
#+end_src

* Table of Contents :toc:
- [[#inicialización][Inicialización]]
- [[#información-del-sistema][Información del sistema]]
- [[#información-personal][Información personal]]
- [[#configuración-de-paquetes][Configuración de paquetes]]
  - [[#use-package][Use-package]]
- [[#configuraciones-generales][Configuraciones generales]]
- [[#registros][Registros]]
- [[#backups][Backups]]
- [[#teclado][Teclado]]
  - [[#which-key][Which-key]]
  - [[#evil][Evil]]
  - [[#kbd-mode][kbd-mode]]
- [[#visuals][Visuals]]
  - [[#general][General]]
  - [[#modeline][Modeline]]
- [[#interacción-edición-y-archivos][Interacción, edición, y archivos]]
  - [[#completion][Completion]]
  - [[#whisper-ai-stt][Whisper AI (stt)]]
  - [[#undo-tree][Undo-tree]]
  - [[#jinx-spellcheck-off][Jinx (spellcheck) [OFF]]]
  - [[#denote-off][Denote [OFF]]]
- [[#org-mode][Org-mode]]
  - [[#orgmode-startup-setup-function][Orgmode startup setup function]]
  - [[#orgmode-packages][Orgmode packages]]
  - [[#org-mode-config][Org Mode Config]]
- [[#syncthing][Syncthing]]
- [[#funciones-propias][Funciones propias]]
- [[#misc-packages][Misc Packages]]
- [[#inspiraciones][Inspiraciones]]

* Inicialización
#+begin_src emacs-lisp
  ;; This sets up the load path so that we can override it
  (setq warning-suppress-log-types '((package reinitialization)))  (package-initialize)
  (setq custom-file "~/.config/emacs/custom-settings.el")
  (setq initial-buffer-choice "~/org/0start.org")

  (setq use-package-always-ensure t)
  (load custom-file t)
#+end_src

* Información del sistema
#+begin_src emacs-lisp
  (defvar my-laptop-p (equal (system-name) "defiant"))
  (defvar my-tablet-p (not (null (getenv "ANDROID_ROOT")))
    "If non-nil, GNU Emacs is running on Termux.")
  (when my-tablet-p (setq gnutls-algorithm-priority "NORMAL: -VERS-TLS1.3"))
  (global-auto-revert-mode) ; simplifies syncing
#+end_src

* Información personal
#+begin_src emacs-lisp
  (setq user-full-name "Vicente Trincado"
        user-mail-address "vtrincado.h@gmail.com")
#+end_src
* Configuración de paquetes
#+begin_src emacs-lisp
  (require 'package)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (package-initialize)
#+end_src
** Use-package
Acá probablemente debería tener =quelpa=, y =quelpa-use-package=
instalados de antes...

#+begin_src emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
    (setq use-package-always-ensure t)
    (require 'use-package)
    (use-package quelpa
      :ensure t)

    (quelpa
     '(quelpa-use-package
       :fetcher git
       :url "https://github.com/quelpa/quelpa-use-package.git"))
    (require 'quelpa-use-package)
    (quelpa-use-package-activate-advice)
#+end_src
* Configuraciones generales
#+begin_src emacs-lisp
  (setq use-short-answers t) ;; When emacs asks yes/no, answer with y/n
  (setq vc-follow-symlinks t) ;; If file is symlinkd, and under vc, follow link

  (setq dired-kill-when-opening-new-dired-buffer t)
  (setq calendar-week-start-day 1)

  (setq org-directory "~/org")
  (setq org-default-notes-file (concat org-directory "/organizer.org"))
#+end_src
* Registros
Probablemente esta parte va a desaparecer cuando empiece a usar Ivy, o
las cosas que usan los chicos cool.

#+begin_src emacs-lisp
  (setq register-preview-delay 0)

  (set-register ?0 (cons 'file (concat org-directory "/0start.org")))
  (set-register ?L (cons 'file "~/.emacs.d/LCARS.org"))
  (set-register ?n (cons 'file org-default-notes-file))
  (set-register ?O (cons 'file org-directory))
#+end_src
* Backups
La verdad es que ni sé muy bien qué hace esta parte. Yo la saqué de
Sacha Chua.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
  (with-eval-after-load 'tramp
    (add-to-list 'tramp-backup-directory-alist
                 (cons tramp-file-name-regexp nil)))
#+end_src
* Teclado
** Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init
    (which-key-mode)
    (which-key-setup-minibuffer))
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (evil-select-search-module 'evil-search-module 'evil-search)
    (setq evil-ex-search-persistent-highlight nil)
    (evil-define-key 'motion help-mode-map "q" 'kill-this-buffer)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "SPC") nil))
  
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src
** General.el
*** Preámbulo
#+BEGIN_SRC emacs-lisp
  (use-package general)

  (general-define-key
   :states '(normal motion visual)
   :keymaps 'override
   :prefix "SPC"

   ;; Top-level functions
   "SPC" '(execute-extended-command :which-key "M-x")
#+END_SRC
*** Buffers
#+BEGIN_SRC emacs-lisp
  ;; Buffers
  "b" '(nil :which-key "buffer")
  "bb" '(switch-to-buffer :which-key "switch")
  "bB" '(ibuffer :which-key "ibuffer")
  "bd" '(evil-delete-buffer :which-key "delete buffer")
  "bk" '(kill-this-buffer :which-key "kill buffer")
  "bp" '(previous-buffer :which-key "previous buffer")
#+END_SRC
*** Dired
#+BEGIN_SRC emacs-lisp
  ;; Dired
  "d" '(nil :which-key "dired")
  "dd" '(my-dired-home :which-key "dired Home")
  "dj" '(dired-jump :which-key "dired jump")
#+END_SRC

*** Files
#+BEGIN_SRC emacs-lisp
  ;; Files
  "f" '(nil :which-key "files")
  "ff" '(find-file :which-key "find file")
#+END_SRC

*** Projectos
#+BEGIN_SRC emacs-lisp
  ;; Projects
    "p" '(nil :which-key "projects")
    "pB" '(project-list-buffers :which-key "list buffers")
    "pd" '(project-dired :which-key "dired")
    "ps" '(project-switch-project :which-key "switch")
#+END_SRC

*** Toggles
#+BEGIN_SRC emacs-lisp
    "t" '(nil :which-key "toggles")
    "tn" '(display-line-numbers-mode :which-key "line numbers")
    "tt" '(nil :which-key "theme color") ;; TODO Para cambiar entre ef-cyprus y ef-elea-dark
#+END_SRC

*** Cierre
#+BEGIN_SRC emacs-lisp
) ;; Cierra SPC prefix block
#+END_SRC
** kbd-mode 
Emacs mode for syntax highlighting kmonad's .kbd files. 
#+begin_src emacs-lisp
 (use-package kbd-mode
  :quelpa (kbd-mode :fetcher github :repo "kmonad/kbd-mode")
  :mode "\\.kbd\\'"
  :commands kbd-mode) 
#+end_src
* Visuals
** General
#+begin_src emacs-lisp
  (setq default-frame-alist '((undecorated . t)))
  (setq inhibit-startup-message t)

  (global-display-line-numbers-mode)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (if my-laptop-p (scroll-bar-mode -1))
#+end_src
** Modeline
#+begin_src emacs-lisp
    (use-package telephone-line
      :config
      (telephone-line-mode 1))
#+end_src
** Modus Themes
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t
    :config
    ;;;; Add all your customizations prior to loading the themes
    ;;(setq modus-themes-italic-constructs t
          ;;modus-themes-bold-constructs nil)
  ;;
    ;;;; Maybe define some palette overrides, such as by using our presets
    ;;(setq modus-themes-common-palette-overrides
          ;;modus-themes-preset-overrides-intense)

    ;; Load the theme of your choice.
    (load-theme 'modus-operandi-tinted)

    (define-key global-map (kbd "<f5>") #'modus-themes-toggle))
#+END_SRC
* Interacción, edición, y archivos
** Completion
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )
#+end_src
*** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
*** YASnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-global-mode 1) ;; o M-x yas-reload-all si YAS ya inició
    )
#+end_src
** Whisper AI (stt)
#+BEGIN_SRC emacs-lisp
  (use-package whisper
    :quelpa (whisper :fetcher github :repo "natrys/whisper.el")
    :config
    (setq whisper-install-directory "/tmp/"
          whisper-model "base"
          whisper-language "es"
          whisper-translate nil))
#+END_SRC
** Undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src
** Jinx (spellcheck)
Funciona filete en realidad, el único tema es el texto que inserta al buffer. De repente si creo que el default debería ser apagado. We'll see.
#+BEGIN_SRC emacs-lisp
  (use-package jinx
    :hook (org-mode . jinx-mode)
    :bind (("M-$" . jinx-correct)
           ("C-M-$" . jinx-languages)))
#+END_SRC
** Denote [OFF]
#+BEGIN_SRC emacs-lisp
  (use-package denote
    :disabled
    :ensure t
    :config
    ;;
    ;; General key bindings
    (setq denote-directory (expand-file-name "~/org"))
    (setq denote-known-keywords '("emacs" "project"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    ;;
    ;; Tweaking the frontmatter
    (setq denote-org-front-matter
          "#+title: %s\n#+date: %s\n#+filetags: %s\n#+identifier: %s\n#+author:\n#+startup: content\n")
    :bind
    ("C-c n n" . denote-open-or-create)
    ("C-c n l" . denote-link-or-create)
    ("C-c n b" . denote-link-find-file)
    ("C-c n B" . denote-link-backlinks)
  )
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))
#+END_SRC
* Org-mode
** Orgmode startup setup function
#+begin_src emacs-lisp
  (defun my-org-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (centered-cursor-mode)
   ; (evil-org-mode)
    )
#+end_src
** Orgmode packages
*** Org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :config
    (setq org-modern-star '("◉" "◈" "❖" "◬" "∿")
          org-modern-list '((42 . "◦") (43 . "•") (45 . "–"))
          ))
#+end_src
*** Org-appear
#+begin_src emacs-lisp
  (use-package org-appear
    :commands (org-appear-mode)
    :hook (org-mode . org-appear-mode)
    :init
    (setq org-hide-emphasis-markers t
          org-pretty-entities t
          org-appear-autoemphasis t
          org-appear-autolinks nil
          org-appear-autosubmarkers t))
#+end_src
*** org-modules
#+begin_src emacs-lisp
  (setq org-modules '(org-protocol))

  (eval-after-load 'org
    '(org-load-modules-maybe t))
#+end_src
*** El Gantt
#+begin_src emacs-lisp
  (use-package elgantt
    :quelpa (elgantt :fetcher github :repo "legalnonsense/elgantt"))
#+end_src
** Org Mode Config
*** Preámbulo
#+begin_src emacs-lisp
  (use-package org
    :hook (org-capture-mode . evil-insert-state)
    :hook (org-mode . my-org-setup)
    :config
#+end_src
*** Visual
#+begin_src emacs-lisp
  (setq org-fontify-whole-heading-line t)
  (setq org-ellipsis "⤵")
  (setq org-agenda-current-time-string "⭠ now ───────────────────────────────────────")
  (setq org-pretty-entities t)
#+end_src
*** Interacción
#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src
*** To-dos
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "SOMEDAY(s)" "NEXT(n)" "PROJ(p)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
#+end_src
*** Org-Capture
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "To-do" entry (file+headline org-default-notes-file "Inbox")
           "* TODO %?\n%u\n")
          ("n" "Next Task" entry (file+headline org-default-notes-file "Tareas")
           "* NEXT %? \nDEADLINE: %t")
          ("e" "Event" entry (file+headline org-default-notes-file "Agendados")
           "* %^{Title} \n%^t\n%?\n")
          ("i" "Idea" entry (file+headline org-default-notes-file "Inbox")
           "* %? :IDEA: \n%u\n")
          ("a" "Author" entry (file+headline org-default-notes-file "Inbox")
           "* %^{Author} :AUTHOR:\n%u\n Intereses: %^{Interests}\n%?\n")       
          ("p" "Protocol" entry (file+headline org-default-notes-file "Inbox")
           "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
          ("l" "Protocol Link" entry (file+headline org-default-notes-file "Inbox")
           "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] :BOOKMARK: \n%u ")
          ))
#+end_src
*** Misceláneos
#+begin_src emacs-lisp 
  ) ;; Este paréntesis termina =use-package org=
#+end_src
*** Keyboard shortcuts
Voy a tener que arreglar esta parte, está como muy separada.
#+begin_src emacs-lisp
  (bind-key "C-c c" 'org-capture)
  (bind-key "C-c a" 'org-agenda)
#+end_src
* Syncthing
#+begin_src emacs-lisp
  (use-package emacs-conflict
      :quelpa (emacs-conflict :fetcher github :repo "ibizaman/emacs-conflict"))
  (global-set-key (kbd "C-c r r") 'emacs-conflict-resolve-conflicts)
  (global-set-key (kbd "C-c r d") 'emacs-conflict-resolve-conflict-dired)
#+end_src

* Funciones propias 
#+begin_src emacs-lisp
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [] into (), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform)))
  (defun load-init ()
      (interactive)
    (load-file "~/.emacs.d/init.el"))
#+end_src

* Misc Packages
#+begin_src emacs-lisp
  (use-package magit :defer t)
  (use-package centered-cursor-mode ;;Devuelve un error que aun no se arreglar en Termux
    :diminish centered-cursor-mode
  )
  (use-package diminish)

  ;; Aquí terminan las configuraciones
#+end_src
* Inspiraciones 
A Sacha Chua, por tener una de las configuraciones más bacanes. A ella
le robé la estructura general del archivo.
- [[https://sachachua.com/dotemacs/index.html][Sacha Chua]]
- [[https://github.com/jakebox/jake-emacs][Jacob Boxerman (JakeB)]]
