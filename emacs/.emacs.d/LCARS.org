#+TITLE: Archivo de Configuración de sistema LCARS
#+AUTHOR: Vicente Trincado
#+EMAIL: vtrincado.h@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle yes :results silent :exports code

:PROPERTIES:
:CUSTOM_ID: babel-init
:END:
<<babel-init>>

Robado de varias partes. Probablemente tenga spanglish metido en todas partes, pero es porque pienso así nomás.

Este es mi =init.el=:
#+begin_src emacs-lisp :tangle "~/.emacs.d/init.el" :eval no 
  (load-file "~/.emacs.d/LCARS.el")

  (put 'narrow-to-region 'disabled nil)
  (put 'list-timers 'disabled nil)
#+end_src

* Inicialización
#+begin_src emacs-lisp
  ;; This sets up the load path so that we can override it
  (setq warning-suppress-log-types '((package reinitialization)))  (package-initialize)
  (setq custom-file "~/.config/emacs/custom-settings.el")
  (setq initial-buffer-choice "~/org/0start.org")

  (setq use-package-always-ensure t)
  (load custom-file t)
#+end_src

* Información del sistema
#+begin_src emacs-lisp
  (defvar my-laptop-p (equal (system-name) "defiant"))
  (defvar my-tablet-p (not (null (getenv "ANDROID_ROOT")))
    "If non-nil, GNU Emacs is running on Termux.")
  (when my-tablet-p (setq gnutls-algorithm-priority "NORMAL: -VERS-TLS1.3"))
  (global-auto-revert-mode) ; simplifies syncing
#+end_src

* Información personal
#+begin_src emacs-lisp
  (setq user-full-name "Vicente Trincado"
        user-mail-address "vtrincado.h@gmail.com")
#+end_src
* Configuración de paquetes
#+begin_src emacs-lisp
  (require 'package)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (package-initialize)
#+end_src
** Use-package
Acá probablemente debería tener =quelpa=, y =quelpa-use-package=
instalados de antes...

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
  (require 'use-package)

  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
  (quelpa-use-package-activate-advice)
#+end_src
* Configuraciones generales
#+begin_src emacs-lisp
  (setq use-short-answers t) ;; When emacs asks yes/no, answer with y/n
  (setq vc-follow-symlinks t) ;; If file is symlinkd, and under vc, follow link

  (setq dired-kill-when-opening-new-dired-buffer t)
  (setq calendar-week-start-day 1)

  (setq org-directory "~/org")
  (setq org-default-notes-file (concat org-directory "/organizer.org"))
#+end_src
* Registros
Probablemente esta parte va a desaparecer cuando empiece a usar Ivy, o
las cosas que usan los chicos cool.

#+begin_src emacs-lisp
  (setq register-preview-delay 0)

  (set-register ?0 (cons 'file (concat org-directory "/0start.org")))
  (set-register ?L (cons 'file "~/.emacs.d/LCARS.org"))
  (set-register ?n (cons 'file org-default-notes-file))
  (set-register ?O (cons 'file org-directory))
#+end_src
* Backups
La verdad es que ni sé muy bien qué hace esta parte. Yo la saqué de
Sacha Chua.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
  (with-eval-after-load 'tramp
    (add-to-list 'tramp-backup-directory-alist
                 (cons tramp-file-name-regexp nil)))
#+end_src
* Teclado
** Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init
    (which-key-mode)
    (which-key-setup-minibuffer))
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (evil-select-search-module 'evil-search-module 'evil-search)
    (setq evil-ex-search-persistent-highlight nil))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
  (evil-define-key 'motion help-mode-map "q" 'kill-this-buffer)
#+end_src
** kbd-mode 
Emacs mode for syntax highlighting kmonad's .kbd files. 
#+begin_src emacs-lisp
 (use-package kbd-mode
  :quelpa (kbd-mode :fetcher github :repo "kmonad/kbd-mode")
  :mode "\\.kbd\\'"
  :commands kbd-mode) 
#+end_src
* Visuals
** General
#+begin_src emacs-lisp
  (setq default-frame-alist '((undecorated . t)))
  (setq inhibit-startup-message t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (if my-laptop-p (scroll-bar-mode -1))
#+end_src
** Modeline
#+begin_src emacs-lisp
    (use-package telephone-line
      :config
      (telephone-line-mode 1))
#+end_src
* Interacción, edición, y archivos
** Completion
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    ) 
#+end_src
* Org-mode
** Orgmode packages
*** Evil Org
#+begin_src emacs-lisp
  ;; (use-package evil-org
    ;; :ensure t
    ;; :diminish evil-org-mode
    ;; :after org
    ;; :hook (org-mode . (lambda () evil-org-mode))
    ;; :config
    ;; (require 'evil-org-agenda)
    ;; (evil-org-agenda-set-keys))
#+end_src
*** Org-modern
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
    :config
    (setq org-modern-star '("◉" "◈" "❖" "◬" "∿")
          org-modern-list '((42 . "◦") (43 . "•") (45 . "–"))
          ))
#+end_src
*** Org-appear
#+begin_src emacs-lisp
  (use-package org-appear
    :commands (org-appear-mode)
    :hook (org-mode . org-appear-mode)
    :init
    (setq org-hide-emphasis-markers t
          org-pretty-entities t
          org-appear-autoemphasis t
          org-appear-autolinks nil
          org-appear-autosubmarkers t))
#+end_src
*** org-modules
#+begin_src emacs-lisp
  (setq org-modules '(org-protocol))

  (eval-after-load 'org
    '(org-load-modules-maybe t))
#+end_src
*** El Gantt
#+begin_src emacs-lisp
  (use-package elgantt
    :quelpa (elgantt :fetcher github :repo "legalnonsense/elgantt"))
#+end_src
** Orgmode startup setup function
#+begin_src emacs-lisp
  (defun my-org-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (centered-cursor-mode)
    (evil-org-mode))
#+end_src
** Org Mode Config
*** Preámbulo
#+begin_src emacs-lisp
  (use-package org
    :hook (org-capture-mode . evil-insert-state)
    :hook (org-mode . my-org-setup)
    :config
#+end_src
*** Visual
#+begin_src emacs-lisp
  (setq org-fontify-whole-heading-line t)
  (setq org-ellipsis "⤵")
  (setq org-agenda-current-time-string "⭠ now ───────────────────────────────────────")
  (setq org-pretty-entities t)
#+end_src
*** Interacción
#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src
*** To-dos
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "SOMEDAY(s)" "NEXT(n)" "PROJ(p)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
#+end_src
*** Org-Capture
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "To-do" entry (file+headline org-default-notes-file "Inbox")
           "* TODO %?\n%u\n")
          ("n" "Next Task" entry (file+headline org-default-notes-file "Tareas")
           "* NEXT %? \nDEADLINE: %t")
          ("e" "Event" entry (file+headline org-default-notes-file "Agendados")
           "* %^{Title} \n%^t\n%?\n")
          ("i" "Idea" entry (file+headline org-default-notes-file "Inbox")
           "* %? :IDEA: \n%u\n")
          ("a" "Author" entry (file+headline org-default-notes-file "Inbox")
           "* %^{Author} :AUTHOR:\n%u\n Intereses: %^{Interests}\n%?\n")       
          ("p" "Protocol" entry (file+headline org-default-notes-file "Inbox")
           "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
          ("l" "Protocol Link" entry (file+headline org-default-notes-file "Inbox")
           "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] :BOOKMARK: \n%u ")
          ))
#+end_src
*** Misceláneos
#+begin_src emacs-lisp 
  ) ;; Este paréntesis termina =use-package org=
#+end_src
*** Keyboard shortcuts
Voy a tener que arreglar esta parte, está como muy separada.
#+begin_src emacs-lisp
  (bind-key "C-c c" 'org-capture)
  (bind-key "C-c a" 'org-agenda)
#+end_src
* Syncthing
#+begin_src emacs-lisp
  (use-package emacs-conflict
      :quelpa (emacs-conflict :fetcher github :repo "ibizaman/emacs-conflict"))
  (global-set-key (kbd "C-c r r") 'emacs-conflict-resolve-conflicts)
  (global-set-key (kbd "C-c r d") 'emacs-conflict-resolve-conflict-dired)
#+end_src

* Funciones propias 
#+begin_src emacs-lisp
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [] into (), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform)))
#+end_src

* Misc Packages
#+begin_src emacs-lisp
  (use-package magit :defer t)
  (use-package centered-cursor-mode ;;Devuelve un error que aun no se arreglar en Termux
    :diminish centered-cursor-mode
  )
  (use-package diminish)

  ;; Aquí terminan las configuraciones
#+end_src
* Inspiraciones 
A Sacha Chua, por tener una de las configuraciones más bacanes. A ella
le robé la estructura general del archivo.
- [[https://sachachua.com/dotemacs/index.html][Sacha Chua]]
- [[https://github.com/jakebox/jake-emacs][Jacob Boxerman (JakeB)]]
